// Code generated by go-bindata.
// sources:
// templates/file.tgo
// templates/publisher.tgo
// templates/subscriber.tgo
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesFileTgo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8f\xcd\x6a\xeb\x30\x10\x46\xf7\x7a\x8a\x0f\xaf\xee\x55\xa9\xb5\xef\xb2\x24\xa5\x86\x92\x14\xea\x17\x90\xe4\xa9\x3d\xc4\xb6\x84\x35\x82\x06\xa1\x77\x2f\x6e\xe8\xcf\x6e\xce\x1c\x38\xf0\x95\xc2\xef\x68\x1f\x33\xcf\x43\x6f\xc7\x54\xab\x31\xb8\x73\x3b\xa2\x94\xbf\x7f\x55\x0a\xad\x43\xad\x2a\x5a\x7f\xb1\x23\xed\xfa\xf5\x76\x9e\xec\x42\xb5\x2a\x65\x0c\xfa\x89\x13\x38\xc1\x66\x09\x18\x69\xa5\xcd\x0a\x0d\xf0\x61\x20\xb8\x2b\x26\x91\x98\x1e\x8c\x19\x59\xa6\xec\x5a\x1f\x16\x73\xb1\x0b\xfb\x89\x87\x6c\xc6\x70\x1f\xb3\x9b\x39\x4d\xb4\xed\x2d\xad\xf5\xe1\x8c\xd3\xb9\xc7\xf1\xd0\xf5\xe8\x9f\xbb\x37\x3c\x75\x2f\x47\xad\xb5\x52\xbc\xc4\xb0\x09\xfe\x29\x00\x68\x7c\x58\x85\x3e\xa4\xb9\x51\xba\xae\xbe\x51\xff\x95\x2a\x45\x68\x89\xb3\x15\x42\xf3\x93\x6e\xd0\x7e\xad\xf9\x55\x29\xbb\xe4\x37\x76\xdf\xee\x33\x00\x00\xff\xff\xc9\x32\x8f\x81\x14\x01\x00\x00")

func templatesFileTgoBytes() ([]byte, error) {
	return bindataRead(
		_templatesFileTgo,
		"templates/file.tgo",
	)
}

func templatesFileTgo() (*asset, error) {
	bytes, err := templatesFileTgoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/file.tgo", size: 276, mode: os.FileMode(420), modTime: time.Unix(1504914741, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPublisherTgo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x53\xc1\x8e\xd3\x30\x10\xbd\xfb\x2b\x66\xa3\x82\xe2\x55\x14\x71\x06\xf5\x80\xd0\xde\x60\x17\x01\x2b\x0e\x08\xa1\xd4\x19\x17\x6b\xd3\x49\x64\x3b\xb4\x95\xe5\x7f\x47\x4e\x9a\xc4\x6d\x13\xd4\x0b\xb9\x54\xb5\xdf\xbc\x79\x33\xef\xd9\xb9\x12\xa5\x22\x84\xa4\x69\x37\x95\x32\xbf\x51\x27\xde\x33\xe7\x56\x5f\xdb\x8d\x11\x5a\x35\x56\xd5\xf4\xed\xd8\xe0\x63\xb1\x43\x78\xbb\x86\x46\x2b\xb2\x12\x92\x57\x26\x46\x24\x90\x7f\x1e\x08\x06\xf4\x19\xcf\x66\x3a\x07\x98\xe5\xd9\xa0\x5e\x66\x79\xf8\x83\x64\x23\x82\xee\x3b\x63\xe9\x10\x0b\x04\xf6\xd8\x20\x5c\xb2\x78\x0f\xc6\x6a\x45\x5b\xc6\x44\x4d\xc6\x42\xca\x02\xa9\x73\xba\xa0\x2d\xc2\x0a\x03\x78\x98\x3a\x7f\x18\xfe\x19\xef\x4f\xb8\xd5\x5c\x2f\xe7\xa6\x42\xef\xe7\x9a\xae\x21\x39\x07\x25\x27\x3e\xa4\xd2\x7b\xc6\xd9\x28\x77\xce\x82\x5e\x75\x2b\x2c\xb8\xae\xcc\x8c\xcb\x33\xf0\xe3\xe7\xec\xbe\xbd\x67\x1d\x74\xd7\xc2\xbd\x39\x92\xc8\xbf\x7c\xff\xd4\x5a\x3c\x30\xcf\x98\x6c\x49\xc0\x23\xee\x17\xbb\xa5\x1c\xee\x97\xa5\xf4\x1a\x34\xda\x56\x13\xbc\x5e\xc4\xb9\x45\x65\xce\x67\x40\xb8\x4f\x63\x5d\xdc\x07\x65\xb7\xf8\xd0\xa9\x4f\x0d\x56\xf2\x1f\x22\x39\x9c\x6c\x3a\xdf\x7a\x2a\xec\x01\x44\x4d\x16\x0f\x36\xff\xd0\xff\x66\xe0\x5c\x97\xa8\xf7\x7a\x1b\x08\xcc\x93\x84\xb8\x86\x03\x6a\x5d\xeb\xd3\xd8\xb2\xd6\xf0\x2b\x8b\x1c\x08\x02\x7b\xd1\x41\x52\x1e\x5b\xd3\x57\x84\x4f\xc9\x40\x12\xa0\xd3\x7d\xfe\x44\xd7\xe2\x62\x31\x57\x42\xde\x75\x24\x77\x6b\x20\x55\x45\xe4\x91\x1b\xa8\xf5\x78\xdc\x27\xd6\xc7\x66\x91\xaa\x58\x78\x59\x7d\xe8\x6e\xdd\xe4\x68\x61\x1a\x4d\xbd\x60\x2d\x1f\x12\x1a\x76\xb1\x6b\xf3\x8f\xb5\x78\x49\x79\x77\x54\xa2\x44\x3d\x5e\x3c\x53\xd5\x5f\x4d\xf0\x78\x75\x6b\x28\x9a\x06\xa9\x4c\x2f\x6f\xe2\xd5\x73\x76\xfb\x10\xcf\x64\xfe\xff\x18\x52\x55\x16\x35\x96\xc1\xe8\x5d\xf1\x82\xe9\xe2\x13\xc8\xe0\x4d\x06\x15\xd2\xd5\x7c\x9c\xc7\x31\x13\x05\x95\xaa\x2c\x2c\xde\x9a\xb2\xa9\xe0\x2e\xce\xda\x45\x5a\x46\x9d\xe3\x9a\x87\x93\xa8\x25\x9f\x4d\xd2\x8c\x53\x43\x6d\x14\xad\xbf\x01\x00\x00\xff\xff\x81\xf9\x99\x91\x62\x06\x00\x00")

func templatesPublisherTgoBytes() ([]byte, error) {
	return bindataRead(
		_templatesPublisherTgo,
		"templates/publisher.tgo",
	)
}

func templatesPublisherTgo() (*asset, error) {
	bytes, err := templatesPublisherTgoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/publisher.tgo", size: 1634, mode: os.FileMode(420), modTime: time.Unix(1504914741, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSubscriberTgo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8f\xd1\x4a\x03\x31\x10\x45\xdf\xf7\x2b\x2e\xa1\x82\x82\xec\x07\x08\x3e\x88\xf8\x6a\x05\xfd\x81\x4d\x3a\xa9\x01\x9d\x0d\x93\xa9\xb4\x0c\xf3\xef\xb2\x5d\x97\x56\xd8\xa7\x24\xc3\xc9\xb9\x77\xcc\x76\x94\x0b\x13\x42\x3b\xc4\x96\xa4\x44\x92\xe0\xde\x99\x6d\xde\xe7\x41\xd5\x32\xf2\xc7\xa9\xd2\xeb\xf0\x4d\x78\x78\x44\x95\xc2\x9a\x11\x6e\xda\x35\x11\xd0\xbf\x1d\xe2\x57\x69\x9f\x24\x0b\xfd\xcf\x13\x2f\x73\x60\xd5\x33\x45\xaf\x5b\xf4\x54\x09\xab\x2a\x77\x14\x56\x92\x3c\x24\x82\x75\x00\x60\x26\x03\xef\x09\x1b\xfa\x21\xd6\xa5\x75\xff\xb2\xbc\x9a\xfb\x99\xdb\xb2\xd9\x85\x71\xbf\x4d\x7a\x44\x1a\x59\xe9\xa8\xfd\xf3\x7c\xde\xc3\xec\xdc\xf3\x49\xf6\x53\x64\xdb\x66\x5c\xff\xb9\x03\x89\x8c\xf2\x97\x4b\xbc\x73\xef\xa6\xa5\xe7\xdb\x6f\x00\x00\x00\xff\xff\xc6\x7e\xc6\x1b\x5d\x01\x00\x00")

func templatesSubscriberTgoBytes() ([]byte, error) {
	return bindataRead(
		_templatesSubscriberTgo,
		"templates/subscriber.tgo",
	)
}

func templatesSubscriberTgo() (*asset, error) {
	bytes, err := templatesSubscriberTgoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/subscriber.tgo", size: 349, mode: os.FileMode(420), modTime: time.Unix(1504914741, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/file.tgo": templatesFileTgo,
	"templates/publisher.tgo": templatesPublisherTgo,
	"templates/subscriber.tgo": templatesSubscriberTgo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"file.tgo": &bintree{templatesFileTgo, map[string]*bintree{}},
		"publisher.tgo": &bintree{templatesPublisherTgo, map[string]*bintree{}},
		"subscriber.tgo": &bintree{templatesSubscriberTgo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

